package it.citel.postel.bancarizzazioneGUI.service;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.security.cert.Certificate;
import java.util.ArrayList;
import java.util.List;

import javax.net.ssl.HttpsURLConnection;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import it.citel.postel.bancarizzazioneGUI.util.DevRestConstants;
import it.citel.postel.commonLib.objects.spedizione.sda.AnagraficaSpedizioneObj;
import it.citel.postel.commonLib.objects.spedizione.sda.ColliSpedizioneObj;
import it.citel.postel.commonLib.objects.spedizione.sda.DatiGeneraliSpedizioneObj;
import it.citel.postel.commonLib.objects.spedizione.sda.DatiSpedizioneObj;
import it.citel.postel.commonLib.objects.spedizione.sda.Ldv;
import it.citel.postel.commonLib.objects.spedizione.sda.ReturnRestStampaLdvSDA;
import it.citel.postel.commonLib.objects.spedizione.sda.SezioneColliSpedizioneObj;
import it.citel.postel.commonLib.objects.spedizione.sda.StampaLdvSDAObj;
import it.citel.postel.commonLib.rest.RESTfulClient;
import it.citel.postel.commonLib.rest.model.Request;
import it.citel.postel.commonLib.rest.model.RequestGetDettagliSpedizione;
import it.citel.postel.commonLib.rest.model.RequestPersistGetLDVFromWSStampaSDA;
import it.citel.postel.commonLib.rest.model.RequestSpedizione;
import it.citel.postel.commonLib.rest.model.Response;

@Service
public class SpedizioneServiceImpl implements SpedizioneService {
	static final Logger log = LogManager.getLogger(SpedizioneServiceImpl.class);
   
	@Autowired private DevRestConstants devRestConstants;
    
	/**
	 * ritorna la url completa dell'end point di Restituzione MAterialita (BancarizzazioneService) + metodo
	 * @param urlMapping - Request Mapping value
	 * @return full mapping endpoint Bancarizzazione Service
	 */
	private String urlRestituzioneMaterialitaService(String urlMapping) {
		String ret = devRestConstants.ROOT_BANCARIZZAZIONE_SERVICE +"/" + devRestConstants.RESTITUZIONE_MATERIALITA + "/"+ urlMapping;
		return ret;
	}
	

	
	
	
	
	
	
	
	
	
	
	
//	
//	@SuppressWarnings("unchecked")
//	@Override
//	public Response<?> persistStampaLDV(Request<RequestPersistGetLDVFromWSStampaSDA> request)
//			throws MalformedURLException, IOException, Exception {
//		Response<Boolean> response = (Response<Boolean>) RESTfulClient.sendPost(urlRestituzioneMaterialitaService("persistStampaLDV"), request,
//				Response.class);
//		log.info(" response status: "+response.getStatus());
//		return response;
//	}
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/*
	
	
	
	
	
	
	
		
		
	@Override
	public Response<?> stampaLdvSDA(Request<RequestSpedizione> request)	throws MalformedURLException, IOException, Exception {
		log.info("STAMPALDVSDA START ");
//		Response<String> responseScat = (Response<String>) RESTfulClient.sendPost(urlStampaLdvSDA(null), request,Response.class);
//		log.info("creaSpedizione response status: "+responseScat.getStatus());
		
//		String retTemp = "{\"outcome\":\"ERROR\",\"messages\":{\"messages\":[{\"message\":\"Errore generico\",\"code\":\"999\",\"field\":null,\"objectName\":null,\"arguments\":[null],\"severity\":2}]}}" ;
//		Gson gson1 = new GsonBuilder().create();
//    	ReturnRestStampaLdvSDA address1= gson1.fromJson(retTemp, ReturnRestStampaLdvSDA.class);
//    	System.out.print(address1);
		
//		connectSDARest(request.getData());
		
		Response<String> response = new Response<String>();
		Response<Boolean> responsePers = new Response<Boolean>();
		try {
			
			String jsonRequest = setRequestSDA(request.getData()); 
			ReturnRestStampaLdvSDA responseSDA = connectAndSendRequest(jsonRequest);
			String var = "";
			
			Request<RequestPersistGetLDVFromWSStampaSDA> requestPersist = new Request<RequestPersistGetLDVFromWSStampaSDA>();
			RequestPersistGetLDVFromWSStampaSDA reqData = new RequestPersistGetLDVFromWSStampaSDA();
			reqData.setRequestJson(jsonRequest);
//			reqData.setResponse(responseSDA);
			requestPersist.setData(reqData);
//			responsePers = (Response<Boolean>) persistStampaLDV(requestPersist);
			
			response.setData(var);
			response.setStatus(true);
		} catch (Exception e) {

			response.setMessage(e.getMessage());
			response.setStatus(false);
		}
			

		    
		 
		log.info("STAMPALDVSDA END. ");
		return response;
	}
	
	
	private String setRequestSDA(RequestSpedizione request) {
		
		String json;
		StampaLdvSDAObj stampa = new StampaLdvSDAObj();
		stampa.setFormatoStampa("A4");
		Ldv r = new Ldv();
		//destinatario
		AnagraficaSpedizioneObj d = new AnagraficaSpedizioneObj();
		d.setIntestatario("in teada as");
		d.setIndirizzo("via ciao");
		d.setCap("00025");
		d.setCodNazione("ITA");
		d.setLocalita("ROMA");
		d.setProvincia("RM");
		d.setReferente("marioTest");
		d.setTelefono("11333333");
		d.setTipoAnagrafica("S");
		
		r.setDestinatario(d);
//		mittente
		AnagraficaSpedizioneObj m = new AnagraficaSpedizioneObj();
        m.setIntestatario("POSTEL S.P.A.");
		m.setIndirizzo("VIALE EUROPA 175");
		m.setCap("00144");
		m.setCodNazione("ITA");
		m.setLocalita("ROMA");
		m.setProvincia("RM");
		m.setReferente("VINCENZO DICOSOLA");
		m.setTelefono("11333333");
		m.setTipoAnagrafica("S");
		r.setMittente(m);
        
		DatiSpedizioneObj ds = new DatiSpedizioneObj();
//		ds.setSezioneColli(sezioneColli);
		
		DatiGeneraliSpedizioneObj dg = new DatiGeneraliSpedizioneObj();
		dg.setContenuto("FARDONI");
		dg.setNote("nessuana nota");
		dg.setNumRifInterno("TNT_42343284");
		dg.setDataSpedizione("05/10/2019");
		
		
		SezioneColliSpedizioneObj sc = new SezioneColliSpedizioneObj();
		List<ColliSpedizioneObj> colliS = new ArrayList<ColliSpedizioneObj>();
//		ColliSpedizioneObj colli = new ColliSpedizioneObj("10","10","10","10");
//		colliS.add(colli);
		sc.setColli(colliS);
		ds.setSezioneColli(sc);
        ds.setDatiGenerali(dg);
//		ds.setAccessori("");
		ds.setCodiceServizio("S09");
		r.setDatiSpedizione(ds);
		
		stampa.setLdv(r);
		Gson gson = new Gson();
		System.out.println("json return-->" +gson.toJson(stampa));
		return gson.toJson(stampa);
	}
	
	
	
	private ReturnRestStampaLdvSDA connectAndSendRequest (String jsonRequest) {
		
		ReturnRestStampaLdvSDA ret = null;
		
		String username = devRestConstants.SDA_SPEDIZIONE_AUTH_USER;
		String password = devRestConstants.SDA_SPEDIZIONE_AUTH_PWD;
		String storeKey =  "classpath:C:\\Users\\Utente\\Desktop\\collaudo-ws.sda.it.cer";
		String pathKeyStore = devRestConstants.SDA_SPEDIZIONE_CERT_PATH_KEYSTORE;
		final String allPassword = "sdacoll";

		
		try 
		{ 
//			String pathKeyStore = "C:\\Program Files\\Java\\jdk1.8.0_211\\jre\\lib\\security\\jssecacerts";
			
			System.setProperty("javax.net.ssl.keyStore", pathKeyStore);
			System.setProperty("javax.net.ssl.keyStorePassword", "sdacoll");
		    System.setProperty("javax.net.ssl.trustStore", pathKeyStore);
		    System.setProperty("javax.net.ssl.trustStorePassword","sdacoll");
		    
		    URL uc = new URL(devRestConstants.SDA_SPEDIZIONE_BASE_URL);;
		    
			URLConnection connection = uc.openConnection(); 
			connection.setDoOutput(true);
//			 connection.setRequestMethod("POST");
			@SuppressWarnings("restriction")
			String authorization = new sun.misc.BASE64Encoder()
					.encode((username + ":" + password).getBytes());
//			connection.setRequestProperty("Authorization", "Basic " + PasswordUtil.base64Encode(username+":"+password));
			connection.setRequestProperty("Authorization", "Basic " + authorization);
			connection.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
			connection.setRequestProperty("Accept", "application/json");
			
			try {
				OutputStream os = connection.getOutputStream();
			    byte[] input = jsonRequest.getBytes("utf-8");
			    os.write(input, 0, input.length);
			    log.debug("URL: " + devRestConstants.SDA_SPEDIZIONE_BASE_URL);
			    log.debug("JSON request: " + os.toString());
			
			    try(BufferedReader br = new BufferedReader(
					  new InputStreamReader(connection.getInputStream(), "utf-8"))) {
					    StringBuilder response = new StringBuilder();
					    String responseLine = null;
					    while ((responseLine = br.readLine()) != null) {
					        response.append(responseLine.trim());
					    }
					    System.out.println(response.toString());
					    byte[] jsonData = response.toString().getBytes();
					    
					    ObjectMapper mapper = new ObjectMapper();
					    try {
					    	ReturnRestStampaLdvSDA re = mapper.readValue(jsonData, ReturnRestStampaLdvSDA.class);
					    	Gson gson = new GsonBuilder().create();
					    	ReturnRestStampaLdvSDA address= gson.fromJson(response.toString(), ReturnRestStampaLdvSDA.class);
					    	System.out.print(address);
					    }catch (Exception e) {

					    	System.out.print(e.getMessage());
					    }

				        
					}
			
			
			
			} catch (MalformedURLException e1) {
				log.debug("Error: " + e1.getMessage());
				e1.printStackTrace();
			}catch (Exception e) {
				log.debug("Error: " + e.getMessage());
			}
		} 
		catch (Exception e) 
		{ 
		   log.debug("Error: " + e.getMessage());
			
		} 
		return ret;
	}
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
//	@Override
//	public ResponseEntity<byte[]> getPdfLdV() throws MalformedURLException, IOException, Exception {
//		log.info("getPdfLdV start ");
//		//TODO AGGANCIARE CHIAMATA WS
//		//Response<String> responseScat = (Response<String>) RESTfulClient.sendPost(devRestConstants.SPEDIZIONE_BASE_URL+"/creaSpedizione", request,Response.class);
//		byte[] contents = FileUtils.readFileToByteArray(new File("D:\\My Documents\\Progetto CITEL\\Demat - Istanze PA\\spedizioni_ldv.pdf"));
//	    HttpHeaders headers = new HttpHeaders();
//	    headers.add("ID_LDV", "LDV"+String.valueOf(RandomUtils.nextInt()).substring(0, 10)); //TODO Estrarre dalla chiamata al WS
//	    headers.setContentType(MediaType.parseMediaType("application/pdf"));
//	    String filename = "ldvXXXXXXXXXX.pdf"; //TODO Estrarre dalla chiamata al WS
//	    headers.setContentDispositionFormData("filename", filename); 
//	    headers.setCacheControl("must-revalidate, post-check=0, pre-check=0");
//	    
//		ResponseEntity<byte[]> response = new ResponseEntity<>(contents, headers, HttpStatus.OK);
//		response = new ResponseEntity<>(contents, headers, HttpStatus.OK);
//		return response;
//	}

	
	
	private void connectSDARest(RequestSpedizione request) throws Exception {
		
		String https_url = devRestConstants.SDA_SPEDIZIONE_BASE_URL;
		String username = "DEM210175";
		String password = "Gennaio10!";
		String storeKey = "classpath:C:\\Users\\Utente\\Desktop\\collaudo-ws.sda.it.cer";
//		String pathKeyStore = Costanti.SDA_SPEDIZIONE_CERT_PATH_KEYSTORE;
		
		URL url;

		url = new URL(https_url);
		HttpsURLConnection con = (HttpsURLConnection) url.openConnection();

		// dumpl all cert info
		if (con != null) {

			con.setRequestProperty("Content-Type", "application/json; utf-8");
			con.setRequestProperty("Accept", "application/json");
			con.setDoOutput(true);

			@SuppressWarnings("restriction")
			String authorization = new sun.misc.BASE64Encoder().encode((username + ":" + password).getBytes());
//					connection.setRequestProperty("Authorization", "Basic " + PasswordUtil.base64Encode(username+":"+password));
			con.setRequestProperty("Authorization", "Basic " + authorization);
			con.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
			con.setRequestProperty("Accept", "application/json");
			String jsonInputString = setRequestSDA(request);
			OutputStream os = con.getOutputStream();
			byte[] input = jsonInputString.getBytes("utf-8");
			os.write(input, 0, input.length);

			System.out.println("Response Code : " + con.getResponseCode());
			System.out.println("Cipher Suite : " + con.getCipherSuite());
			System.out.println("\n");

			Certificate[] certs = con.getServerCertificates();
			for (Certificate cert : certs) {
				System.out.println("Cert Type : " + cert.getType());
				System.out.println("Cert Hash Code : " + cert.hashCode());
				System.out.println("Cert Public Key Algorithm : " + cert.getPublicKey().getAlgorithm());
				System.out.println("Cert Public Key Format : " + cert.getPublicKey().getFormat());
				System.out.println("\n");
			}
			// dump all the content
			if (con != null) {

				System.out.println("****** Content of the URL ********");
				BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));

				String input1;

				while ((input1 = br.readLine()) != null) {
					System.out.println(input);
				}
				br.close();

			}

		}
	}
	*/

}
